{% extends "./layout.twig" %}

{% block head %}

  <title>{{ type | capitalize }} {{ filename | capitalize }} - {{ cat | capitalize }}</title>

  <script>
    const file = `{{ file }}`;
    const filename = "{{ type }}.{{ filename }}";
    const cat = "{{ cat }}";
    const params = {{ paramsstr }};
  </script>

  <script src="/js/file.js"></script>

{% endblock %}

{% block body %}
  <nav>
    <div class="search" id="search" search='simple' s-con='filecontainer'>
      <input type="text" placeholder="Search..."/>
    </div>
    <div class="container" id="filecontainer">
      <div class="loader">
        <img src='/dist/pic/load.gif' />
      </div>
    </div>
    <div class="but">
      <a id="savebut">
        Save
        <img src='/dist/pic/load.gif' />
      </a>
    </div>
  </nav>
  <main>
    <div class="topbar">
      <div>
        <h2>{{ cat | capitalize }}</h2>
        <h2>{{ type | capitalize }}</h2>
        <h2>{{ filename | capitalize }}</h2>
      </div>
      <div>
        <strong>Auto save</strong>
        <label class="switch">
          <input type="checkbox" id="i-autosave">
          <span class="slider round"></span>
        </label>
      </div>
    </div>
    <textarea id="editor"></textarea>
    <span class="info-but" id="info-but">
      <i class="fas fa-info"></i>
    </span>
    <span class="back-but">
      <a href="/webapp" class="fas fa-chevron-left"></a>
    </span>
  </main>
  <div class="console" id="console"></div>
  <div class="rightmenu">
    <div class="search" id="search" search="simple" s-con='paramcontainer'>
      <input type="text" placeholder="Search..."/>
    </div>
    <div class="paramcontainer" id="paramcontainer">
      <h2>Parameters</h2>
      {% for param in params %}
        <strong param='{{ param }}' s-val='{{ param }}'>{{ param }}</strong>
      {% else %}
      <div class="loader">
        <img src='/dist/pic/load.gif' />
      </div>
      {% endfor %}
    </div>
  </div>
  <div class="infos" id="infos" style='display: none'>
    <span>
      <div onclick="event.stopPropagation()">
        <h2>Gimme some help</h2>
        <div>
          <button class="accordion">Desc</button>
          <div class="panel">
            <p>
              The 'desc' attribute in 'responses' let you put a little description of the response. For example when it is used, what comes next etc...
            </p>
            <pre>
- responses:
  - desc: "Response used when the user ask the bot his mood"
            </pre>
          </div>
          <button class="accordion">Text</button>
          <div class="panel">
            <p>
              The 'text' attribute in 'responses' let you add a text response. This attribute is a little bit complicated to understand but really simple to use because you can make all kind of combinations with it's attributes.</p>
              The first attribute you have to choose is the language:
            <ul>
              <li>'fr' if you don't want different style of language</li>
              <li>'fr-tu' for a relax language</li>
              <li>'fr-vous' for a strict language</li>
            </ul>
            <p>
              Note that if you use 'fr-tu' you have to put a 'fr-vous'.
              <br>
              If you want to add a condition for the different language just add '-cond' after the attribute like 'fr-cond'
            </p>
            <p>
              Now that you have choosen the language, if you didn't specified a 'cond', you can just add a list of sentences. One of them will be picked randomly to send the response.
            </p>
            <pre>
- responses:
  - text:
      fr:
        - "How are you ?"
        - "Are you good ?"
        - "I'm fine and you ?"
  - text:
      fr-tu:
        - "You good ?"
        - "What's up ?"
      fr-vous:
        - "How are you ?"
        - "Are you fine today ?"
            </pre>
            <p>
              If you specified a cond, you can then add a 'cond' attribute which contains the condition used to choose between the possibilities.
              <br>
              You can now choose to put the condition on 'sing' / 'plur' or on 'masc' / 'fem'.
            </p>
            <ul>
              <li>'masc'</li>
              <li>'fem'</li>
              <li>'sing'</li>
              <li>'plur'</li>
            </ul>
            <p>
              Note that you cannot choose 'sing' / 'plur' and 'masc' / 'fem' and that you have to put both of the pair.
            </p>
            <p>
              If you really want to put 'sing' / 'plur' and 'masc' / 'fem', you can specify the '-cond' like before.
              <br>
              If you don't, your code should be like that :
            </p>
            <pre>
- responses:
  - text:
    fr-cond:
      cond: "secretary.nb"
      sing:
        - The secretary will help you with that
        - Our secretary can help you
      plur:
        - The secretaries will help you with that
        - Our secretaries can help you
            </pre>
            <p>
              Then if you want both conds you will have this :
            </p>
            <pre>
- responses:
  - text:
      fr-cond:
        cond: "concierges.nb"
        sing-cond:
          cond: "concierges.genre"
          fem:
            - "La concierge vous accueille"
          masc:
            - "Le concierge vous accueille"
        plur:
          - "Les concierges vous accueillent"
            </pre>
          </div>
          <button class="accordion">Media</button>
          <div class="panel">
            <p>
              The 'media' attribute in 'responses' let you add an image in the response.
              <br>
              This attribute is really easy to use, you just have to put an attribute 'value' with the url of your image.
            </p>
            <pre>
- responses:
  - media:
      value: "https://my-site.com/my-wonderful-image"
            </pre>
            <p>
              If you want to add some text instead of the picture if the platform doesn't support the images, you can just put an attribute 'alt' which acts just like 'text'.
            </p>
          </div>
          <button class="accordion">Link</button>
          <div class="panel">
            <p>
              The 'link' attribute in 'responses' let you add a link to a website in the response.
              <br>
              This attribute is really easy to use, you just have to put an attribute 'value' with the url of your website.
            </p>
            <pre>
- responses:
  - link:
      value: "https://my-site.com/my-cool-page"
            </pre>
            <p>
              If you want to add some text instead of the link if the platform doesn't support the url, you can just put an attribute 'alt' which acts just like 'text'.
            </p>
          </div>
          <button class="accordion">Btn</button>
          <div class="panel">
            <p>
              The 'btn' attribute in 'responses' let you add buttons in the response to let the user a choice.
            </p>
            <p>
              Like in 'text', you have to choose a language :
              <ul>
                <li>'fr' if you don't want different style of language</li>
                <li>'fr-tu' for a relax language</li>
                <li>'fr-vous' for a strict language</li>
              </ul>
            </p>
            <p>
              Then you add an array with all of your buttons:
              <br>
              every butttons should have the attribute 'text' which is the text of the button, 'followupintent' which is the intent to trigger when we press the button and 'value' which is the value to sent (as an entity) to the intent.
            </p>
            <pre>
- responses:
  - text:
      fr:
        - "What's your favorite color"
  - btn:
      fr:
        - text: "red"
          value: "red"
          followupintent: "choosecolor"
        - text: "blue"
          value: "blue"
          followupintent: "choosecolor"
        - text: "next"
          value: ""
          followupintent: "next"
            </pre>
            <p>
              If you want to add some text instead of the buttons if the platform doesn't support them, you can just put an attribute 'alt' which acts just like 'text'.
            </p>
          </div>
          <button class="accordion">Dropdown</button>
          <div class="panel">
            <p>
              The 'dropdown' attribute in 'responses' let you add a dropdown in the response to let the user a choice between different options.
              This attribute is similar to 'btn'.
            </p>
            <p>
              Like in 'text', you have to choose a language :
              <ul>
                <li>'fr' if you don't want different style of language</li>
                <li>'fr-tu' for a relax language</li>
                <li>'fr-vous' for a strict language</li>
              </ul>
            </p>
            <p>
              Then you add an array with all of your options:
              <br>
              every option should have the attribute 'text' which is the text of the option, 'followupintent' which is the intent to trigger when we choose the option and 'value' which is the value to sent (as an entity) to the intent.
            </p>
            <pre>
- responses:
  - text:
      fr:
        - "What's your favorite color"
  - dropdown:
      fr:
        - text: "red"
          value: "red"
          followupintent: "choosecolor"
        - text: "blue"
          value: "blue"
          followupintent: "choosecolor"
        - text: "next"
          value: ""
          followupintent: "next"
            </pre>
            <p>
              If you want to add some text instead of the dropdown if the platform doesn't support it, you can just put an attribute 'alt' which acts just like 'text'.
            </p>
          </div>
          <button class="accordion">Clone</button>
          <div class="panel">
            <p>
              The 'clone' attribute let you clone the content of another response. It is very easy to use, you just put the name of the other intent as it's value.
            </p>
            <pre>
intent: "test.clone"
type: "test"
clone: "test.text"
responses:
  - desc: "Test of the clone attribute"
            </pre>
            <p>
              You can access to the response you cloned by selecting the 'clone' attribute whithout the value. And by clicking with 'control' key pressed.
              It will load you the good reponse.
            </p>
          </div>
          <button class="accordion">Foreach in text</button>
          <div class="panel">
            <p>
            If you have some text you want to duplicate has many time has an array. To be clearer let's say we want to show a list of groups so that the user can choose one of them.
            The groups depends on the user so we cannot make something fix. You can use the foreach in text syntax.
            </p>
            <pre>
- responses:
  - text:
      fr:
        - "[[ key+1 ]] - for [[ group.name ]]::foreach key, group in site.groups"
            </pre>
            <p>
            This response will print something like this
            </p>
            <p>1 - for Axa 2 - for Adidas 3 - for Easylife</p>
            <p>
              Be careful of the syntax, there's no linter for this for now and a little mistake will show a really bad response.
            </p>
          </div>
          <button class="accordion">Foreach for btn and dropdown</button>
          <div class="panel">
            <p>
            Same as the text foreach, if you want to put a button or an option in a dropdown for each element from an array, you can use the btn and dropdown foreach syntax.
            </p>
            <pre>
- responses:
  - btn
      foreach: "key, group in site.groups"
      fr:
        - text: "[[ group.name ]]"
        - value: "[[ key ]]"
        - followupintent: "toto"
            </pre>
            <p>
            This will print a button for each group. You can see that the value depends on the key but it can depend on the group id as well.
            </p>
          </div>
          <button class="accordion">Errors and Warnings</button>
          <div class="panel">
            <p>
              <strong>Errors</strong>
              <br>
              The errors show you problems in the Yaml syntax. <br>
              The informations are often very easy to understand but some times it can be a little tricky.
            </p>
            <ul>
              <li>Your code is full of red and the error says "Unexpected characters near ..." : it must be a double quote note closed previously</li>
              <li>"Unable to parse" : look at the line of the error it can be a quote, indentation or column problem</li>
              <li>"You cannot define a mapping item when in a sequence" : it must be an indentation problem, it means somewhere in the code, you put an attribute instead of an element for an array</li>
            </ul>
            <p>
              <strong>Warnings</strong>
              <br>
              The warnings show you problems in the Lifee syntax.
            </p>
            <ul>
              <li>"The character ' is forbidden as a delimiter use " instead" : this is a rule we added to be as clear as possible, when you write some text, you have to surround it with ""</li>
              <li>"Attribute '...' doesn't exist in the current context" : this means a first level attribute is not valid</li>
              <li>"Attribute '...' already exists" : this means a first level attribute is already present</li>
              <li>"Property of '...' must be an array" : this means you must forgot the '-' character to start an array</li>
              <li>"Unknown property '...' for '...'" : this means you are trying to add a not valid property</li>
              <li>"Property '...' for '...' must be a string" : this means you made a new line without specified a text value you can just put "" if you don't want to provide text</li>
              <li>"Property '...' for '...' cannot be a string" : this means you put text just after an attribute which should be an object or an array</li>
              <li>"Attribute '...' must be an array and cannot be null" : this means you forgot to add value for a first level attribute</li>
              <li>"Unexpected line" : this means you have an indentation problems</li>
              <li>"Attribute '...' must be a string and cannot be an object or an array" : this means a first level attribute should be a string but is an object or an array<li>
              <li>"Parameter '...' is not valid" : this means that a parameter between '{{ }}' is not in the list on the right</li>
              <li>"Missing attribute '...' in '...'" : this is pretty clear but the line is not specified</li>
              <li>"Unknown attribute '...' for '...'" : this is pretty clear but the line is not specified</li>
              <li>"Parameter '...' is not valid" : this means a parameter from a foreach in dropdown or btn is not valid, check your foreach variables</li>
              <li>"Malformed 'foreach' in text" : this means a foreach in text value is malformed, check your foreach syntax</li>
              <li>"Unknown parameter '...' in 'foreach' in text" : this means the variable provided to a foreach in text is not present in the right list</li>
            </ul>
          </div>
        </div>
      </div>
    </span>
  </div>
{% endblock %}
