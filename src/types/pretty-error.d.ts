/** Declaration file generated by dts-gen */
/*
export = pretty_error;

declare class pretty_error {
    constructor();

    alias(stringOrRx: any, alias: any): any;

    appendStyle(toAppend: any): any;

    config(c: any): any;

    filter(...args: any[]): any;

    filterParsedError(...args: any[]): any;

    getObject(e: any): any;

    removeAlias(stringOrRx: any): any;

    removeAllAliases(): any;

    removeAllFilters(): any;

    removeAllParsedErrorFilters(): any;

    removeFilter(...args: any[]): any;

    removeParsedErrorFilter(...args: any[]): any;

    render(e: any, logIt: any, useColors: any): any;

    setMaxItems(maxItems: any): any;

    skip(...args: any[]): any;

    skipNodeFiles(): any;

    skipPackage(...args: any[]): any;

    skipPath(...args: any[]): any;

    unskip(...args: any[]): any;

    unskipAll(): any;

    unskipAllPackages(): any;

    unskipAllPaths(): any;

    unskipNodeFiles(): any;

    unskipPackage(...args: any[]): any;

    unskipPath(...args: any[]): any;

    withColors(): any;

    withoutColors(): any;

    static start(): any;

    static stop(): any;

}

declare namespace pretty_error {
    namespace prototype {
        const renderer: any;

        const style: any;

        function alias(stringOrRx: any, alias: any): any;

        function appendStyle(toAppend: any): any;

        function config(c: any): any;

        function filter(...args: any[]): any;

        function filterParsedError(...args: any[]): any;

        function getObject(e: any): any;

        function removeAlias(stringOrRx: any): any;

        function removeAllAliases(): any;

        function removeAllFilters(): any;

        function removeAllParsedErrorFilters(): any;

        function removeFilter(...args: any[]): any;

        function removeParsedErrorFilter(...args: any[]): any;

        function render(e: any, logIt: any, useColors: any): any;

        function setMaxItems(maxItems: any): any;

        function skip(...args: any[]): any;

        function skipNodeFiles(): any;

        function skipPackage(...args: any[]): any;

        function skipPath(...args: any[]): any;

        function start(...args: any[]): any;

        function stop(): any;

        function unskip(...args: any[]): any;

        function unskipAll(): any;

        function unskipAllPackages(): any;

        function unskipAllPaths(): any;

        function unskipNodeFiles(): any;

        function unskipPackage(...args: any[]): any;

        function unskipPath(...args: any[]): any;

        function withColors(): any;

        function withoutColors(): any;

        namespace alias {
            const prototype: {
            };

        }

        namespace appendStyle {
            const prototype: {
            };

        }

        namespace config {
            const prototype: {
            };

        }

        namespace filter {
            const prototype: {
            };

        }

        namespace filterParsedError {
            const prototype: {
            };

        }

        namespace getObject {
            const prototype: {
            };

        }

        namespace removeAlias {
            const prototype: {
            };

        }

        namespace removeAllAliases {
            const prototype: {
            };

        }

        namespace removeAllFilters {
            const prototype: {
            };

        }

        namespace removeAllParsedErrorFilters {
            const prototype: {
            };

        }

        namespace removeFilter {
            const prototype: {
            };

        }

        namespace removeParsedErrorFilter {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setMaxItems {
            const prototype: {
            };

        }

        namespace skip {
            const prototype: {
            };

        }

        namespace skipNodeFiles {
            const prototype: {
            };

        }

        namespace skipPackage {
            const prototype: {
            };

        }

        namespace skipPath {
            const prototype: {
            };

        }

        namespace start {
            const prototype: {
            };

        }

        namespace stop {
            const prototype: {
            };

        }

        namespace unskip {
            const prototype: {
            };

        }

        namespace unskipAll {
            const prototype: {
            };

        }

        namespace unskipAllPackages {
            const prototype: {
            };

        }

        namespace unskipAllPaths {
            const prototype: {
            };

        }

        namespace unskipNodeFiles {
            const prototype: {
            };

        }

        namespace unskipPackage {
            const prototype: {
            };

        }

        namespace unskipPath {
            const prototype: {
            };

        }

        namespace withColors {
            const prototype: {
            };

        }

        namespace withoutColors {
            const prototype: {
            };

        }

    }

}

*/
